     1                                  %include "config.s"
     2                              <1> %define BUFFSIZE	512
     2                                  %include "macros.mac"
     3                              <1> ;------------------------------------------------
     4                              <1> ; pops multiple times in REVERSE order
     5                              <1> ;------------------------------------------------
     6                              <1> %macro  	_mrpop 1-* 
     7                              <1> 		%rep %0 
     8                              <1> 		%rotate -1 
     9                              <1> 		pop     %1 
    10                              <1> 		%endrep 
    11                              <1> 
    12                              <1> %endmacro
    13                              <1> ;------------------------------------------------
    14                              <1> 
    15                              <1> ;------------------------------------------------
    16                              <1> ; pushes multiple times in NORMAL order
    17                              <1> ;------------------------------------------------
    18                              <1> %macro		_mpush 1-*		
    19                              <1> 		%rep %0 
    20                              <1> 		push    %1 
    21                              <1> 		%rotate 1 
    22                              <1> 		%endrep 
    23                              <1> 
    24                              <1> %endmacro
    25                              <1> ;------------------------------------------------
    26                              <1> 
    27                              <1> ;------------------------------------------------
    28                              <1> ; pushes multiple times in REVERSE order
    29                              <1> ;------------------------------------------------
    30                              <1> %macro		_mrpush 1-*		
    31                              <1> 		%rep %0 
    32                              <1> 		%rotate -1 
    33                              <1> 		push     %1 
    34                              <1> 		%endrep 
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> ;------------------------------------------------
    38                              <1> 
    39                              <1> ;------------------------------------------------
    40                              <1> %macro		_jmptbl_addr 1-*
    41                              <1> 		%rep %0
    42                              <1> 		dq ident_arg.case_%1
    43                              <1> 		%rotate 1
    44                              <1> 		
    45                              <1> 		%endrep
    46                              <1> %endmacro
    47                              <1> ;------------------------------------------------
    48                              <1> 
    49                              <1> 
    50                              <1> ;------------------------------------------------
    51                              <1> 
    52                              <1> ;------------------------------------------------
     3                                  
     4                                  section .text
     5                                  
     6                                  
     7                                  ;------------------------------------------------
     8                                  %defstr		ARGSTR	dxobcs%
     9                                  %strlen		ARGLEN	ARGSTR
    10                                  ;------------------------------------------------
    11                                  
    12                                  		global Print
    13                                  
    14                                  section		.text
    15                                  
    16 00000000 415B                    Print:		pop r11				; save ret addr to r11
    17                                  		_mpush r9, r8, rcx, rdx, rsi, rdi
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 00000002 4151                <2>  push %1
    21                              <2>  %rotate 1
    20 00000004 4150                <2>  push %1
    21                              <2>  %rotate 1
    20 00000006 51                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000007 52                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000008 56                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000009 57                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
    18                                  
    19 0000000A E80B000000              		call __printf
    20                                  		
    21                                  		_mrpop r9, r8, rcx, rdx, rsi, rdi
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000000F 5F                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000010 5E                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000011 5A                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000012 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000013 4158                <2>  pop %1
     8                              <2>  %rotate -1
     9 00000015 4159                <2>  pop %1
    11                              <1> 
    22 00000017 4153                    		push r11			; restore ret addr
    23                                  
    24 00000019 C3                      		ret
    25                                  ;------------------------------------------------
    26                                  
    27                                  
    28                                  
    29                                  ;------------------------------------------------
    30                                  ; printf
    31                                  ;------------------------------------------------
    32                                  ; Entry: rsi - string addr
    33                                  ;	  other args via stack
    34                                  ; Note_: rsi - curr adr in buffer
    35                                  ;
    36                                  ;------------------------------------------------
    37                                  
    38 0000001A 55                      __printf:	push rbp
    39 0000001B 4889E5                  		mov rbp, rsp
    40                                  
    41                                  		_mpush rbx, r11, r12, r13, r14, r15
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 0000001E 53                  <2>  push %1
    21                              <2>  %rotate 1
    20 0000001F 4153                <2>  push %1
    21                              <2>  %rotate 1
    20 00000021 4154                <2>  push %1
    21                              <2>  %rotate 1
    20 00000023 4155                <2>  push %1
    21                              <2>  %rotate 1
    20 00000025 4156                <2>  push %1
    21                              <2>  %rotate 1
    20 00000027 4157                <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
    42                                  
    43 00000029 488B7510                		mov rsi, [rbp + 16]
    44 0000002D 48BF-                   		mov rdi, buffer
    44 0000002F [9100000000000000] 
    45                                  		
    46 00000037 803E00                  .print_loop:	cmp byte [rsi], 0x0		; \0
    47 0000003A 7420                    		je .print_end
    48 0000003C 803E25                  		cmp byte [rsi], '%'		; arg flag
    49 0000003F 750F                    		jne .save
    50                                  		
    51 00000041 48FFC6                  		inc rsi
    52 00000044 8A1E                    		mov byte bl, [rsi]
    53 00000046 E81E000000              		call ident_arg
    54 0000004B 48FFC6                  		inc rsi
    55                                  
    56 0000004E EBE7                    		jmp .print_loop
    57                                  
    58 00000050 8A06                    .save:		mov byte al, [rsi]
    59 00000052 E81E010000              		call buff_ins	
    60 00000057 48FFC6                  		inc rsi
    61                                  
    62 0000005A EBDB                    		jmp .print_loop
    63                                  
    64                                  .print_end:	_mrpop rbx, r11, r12, r13, r14, r15
    64                              <1> .print_end: 
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000005C 415F                <2>  pop %1
     8                              <2>  %rotate -1
     9 0000005E 415E                <2>  pop %1
     8                              <2>  %rotate -1
     9 00000060 415D                <2>  pop %1
     8                              <2>  %rotate -1
     9 00000062 415C                <2>  pop %1
     8                              <2>  %rotate -1
     9 00000064 415B                <2>  pop %1
     8                              <2>  %rotate -1
     9 00000066 5B                  <2>  pop %1
    11                              <1> 
    65                                  
    66 00000067 5D                      		pop rbp
    67 00000068 C3                      		ret
    68                                  ;------------------------------------------------
    69                                  
    70                                  %macro		_two_sys_write 3
    71                                  		_mpush %1, %2, %3
    72                                  		mov rcx, [rbp + 16]
    73                                  		push rcx
    74                                  
    75                                  		call atoi
    76                                  
    77                                  		_mrpop r8, r8, r8, r8
    78                                  
    79                                  		mov rcx, atoi_num_buff
    80                                  		
    81                                  		call str_write
    82                                  
    83                                  		jmp .return
    84                                  %endmacro
    85                                  
    86                                  ;------------------------------------------------
    87                                  ; Entry: bl  - char
    88                                  ; 	 rdi - current free addr in buffer
    89                                  ; Destr: rax, rcx, rdx, rdi
    90                                  ; Exit:  rax - free adr in buff, _note: rax = rdi
    91                                  ;------------------------------------------------
    92 00000069 B906000000              ident_arg:	mov rcx, ARGLEN - 1
    93                                  
    94 0000006E 3A99[89000000]          .ident_loop:	cmp byte bl, args[rcx]
    95 00000074 740B                    		je .switch
    96 00000076 E2F6                    		loop .ident_loop
    97                                  		
    98 00000078 3A99[89000000]          		cmp byte bl, args[rcx]
    99 0000007E 7401                    		je .switch
   100                                  
   101                                  		; default: dont do anything
   102                                  
   103 00000080 C3                      		ret
   104                                  
   105 00000081 4883C508                .switch		add rbp, 0x8
   106                                  
   107 00000085 488B0CCD[00000000]      		mov rcx, qword jmp_table[0 + rcx * 8]
   108 0000008D FFE1                    		jmp rcx
   109                                  
   110 0000008F 488B4510                .case_d:	mov rax, [rbp + 16]
   111 00000093 E82A010000              		call dectoi
   112                                  
   113 00000098 48890425[48000000]      		mov qword [atoi_num_buff], rax
   114 000000A0 C60425[50000000]00      		mov byte atoi_num_buff[8], 0x0
   115 000000A8 48B9-                   		mov rcx, atoi_num_buff
   115 000000AA [4800000000000000] 
   116                                  
   117 000000B2 E8AD000000              		call str_write
   118 000000B7 E9A4000000              		jmp .return
   119                                  
   120                                  .case_x:	_two_sys_write atoi_num_buff, 8, 0x10
   120                              <1> .case_x: 
    71                              <1>  _mpush %1, %2, %3
    19                              <2>  %rep %0
    20                              <2>  push %1
    21                              <2>  %rotate 1
    22                              <2>  %endrep
    20 000000BC 68[48000000]        <3>  push %1
    21                              <3>  %rotate 1
    20 000000C1 6A08                <3>  push %1
    21                              <3>  %rotate 1
    20 000000C3 6A10                <3>  push %1
    21                              <3>  %rotate 1
    23                              <2> 
    72 000000C5 488B4D10            <1>  mov rcx, [rbp + 16]
    73 000000C9 51                  <1>  push rcx
    74                              <1> 
    75 000000CA E826010000          <1>  call atoi
    76                              <1> 
    77                              <1>  _mrpop r8, r8, r8, r8
     7                              <2>  %rep %0
     8                              <2>  %rotate -1
     9                              <2>  pop %1
    10                              <2>  %endrep
     8                              <3>  %rotate -1
     9 000000CF 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000D1 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000D3 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000D5 4158                <3>  pop %1
    11                              <2> 
    78                              <1> 
    79 000000D7 48B9-               <1>  mov rcx, atoi_num_buff
    79 000000D9 [4800000000000000]  <1>
    80                              <1> 
    81 000000E1 E87E000000          <1>  call str_write
    82                              <1> 
    83 000000E6 EB78                <1>  jmp .return
   121                                  
   122                                  .case_o:	_two_sys_write atoi_num_buff, 11, 0x8
   122                              <1> .case_o: 
    71                              <1>  _mpush %1, %2, %3
    19                              <2>  %rep %0
    20                              <2>  push %1
    21                              <2>  %rotate 1
    22                              <2>  %endrep
    20 000000E8 68[48000000]        <3>  push %1
    21                              <3>  %rotate 1
    20 000000ED 6A0B                <3>  push %1
    21                              <3>  %rotate 1
    20 000000EF 6A08                <3>  push %1
    21                              <3>  %rotate 1
    23                              <2> 
    72 000000F1 488B4D10            <1>  mov rcx, [rbp + 16]
    73 000000F5 51                  <1>  push rcx
    74                              <1> 
    75 000000F6 E8FA000000          <1>  call atoi
    76                              <1> 
    77                              <1>  _mrpop r8, r8, r8, r8
     7                              <2>  %rep %0
     8                              <2>  %rotate -1
     9                              <2>  pop %1
    10                              <2>  %endrep
     8                              <3>  %rotate -1
     9 000000FB 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000FD 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000FF 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000101 4158                <3>  pop %1
    11                              <2> 
    78                              <1> 
    79 00000103 48B9-               <1>  mov rcx, atoi_num_buff
    79 00000105 [4800000000000000]  <1>
    80                              <1> 
    81 0000010D E852000000          <1>  call str_write
    82                              <1> 
    83 00000112 EB4C                <1>  jmp .return
   123                                  
   124                                  .case_b:	_two_sys_write atoi_num_buff, 32, 0x2
   124                              <1> .case_b: 
    71                              <1>  _mpush %1, %2, %3
    19                              <2>  %rep %0
    20                              <2>  push %1
    21                              <2>  %rotate 1
    22                              <2>  %endrep
    20 00000114 68[48000000]        <3>  push %1
    21                              <3>  %rotate 1
    20 00000119 6A20                <3>  push %1
    21                              <3>  %rotate 1
    20 0000011B 6A02                <3>  push %1
    21                              <3>  %rotate 1
    23                              <2> 
    72 0000011D 488B4D10            <1>  mov rcx, [rbp + 16]
    73 00000121 51                  <1>  push rcx
    74                              <1> 
    75 00000122 E8CE000000          <1>  call atoi
    76                              <1> 
    77                              <1>  _mrpop r8, r8, r8, r8
     7                              <2>  %rep %0
     8                              <2>  %rotate -1
     9                              <2>  pop %1
    10                              <2>  %endrep
     8                              <3>  %rotate -1
     9 00000127 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000129 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 0000012B 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 0000012D 4158                <3>  pop %1
    11                              <2> 
    78                              <1> 
    79 0000012F 48B9-               <1>  mov rcx, atoi_num_buff
    79 00000131 [4800000000000000]  <1>
    80                              <1> 
    81 00000139 E826000000          <1>  call str_write
    82                              <1> 
    83 0000013E EB20                <1>  jmp .return
   125                                  ; OK
   126 00000140 8A4510                  .case_c:	mov byte al, [rbp + 16]
   127 00000143 E82D000000              		call buff_ins
   128 00000148 EB16                    		jmp .return
   129                                  
   130                                  ; OK
   131 0000014A 488B4D10                .case_s:	mov rcx, [rbp + 16]
   132                                  
   133 0000014E E811000000              		call str_write
   134 00000153 EB0B                    		jmp .return
   135                                  ; OK
   136 00000155 4883ED08                .case_per:	sub rbp, 0x8
   137 00000159 88D8                    		mov al, bl
   138 0000015B E815000000              		call buff_ins
   139                                  
   140 00000160 4889F8                  .return:	mov rax, rdi
   141 00000163 C3                      		ret
   142                                  ;------------------------------------------------
   143                                  
   144                                  
   145                                  
   146                                  ;------------------------------------------------
   147                                  ; str_write
   148                                  ;------------------------------------------------
   149                                  ; Entry: rcx - address of null-terminated string
   150                                  ;------------------------------------------------
   151 00000164 8A01                    str_write:	mov byte al, [rcx]
   152 00000166 3C00                    		cmp al, 0x0
   153                                  
   154 00000168 740A                    		je .return
   155                                  		
   156 0000016A E806000000              		call buff_ins
   157                                  
   158 0000016F 48FFC1                  		inc rcx
   159 00000172 EBF0                    		jmp str_write
   160                                  
   161 00000174 C3                      .return:	ret
   162                                  ;------------------------------------------------
   163                                  
   164                                  ;------------------------------------------------
   165                                  ; Entry: rdi - current free position in buffer
   166                                  ; 	 al  - char to write in buffer
   167                                  ;
   168                                  ; Writes symbol to buffer. If buffer if full or
   169                                  ; newline character detected, buffer will be written
   170                                  ; to console via syscall(1). After writing buffer will
   171                                  ; be cleared
   172                                  ; Exit:	 rax - free pos in buffer(rdi = rax)
   173                                  ;------------------------------------------------
   174 00000175 8807                    buff_ins:	mov [rdi], al
   175 00000177 48FFC7                  		inc rdi
   176                                  
   177 0000017A 4881FF[90020000]        		cmp rdi, buffer +  BUFFSIZE - 1	; last always \0
   178 00000181 7705                    		ja .call_write
   179                                  
   180 00000183 3C0A                    		cmp al, 0xa			; if \n
   181 00000185 7401                    		je .call_write
   182                                  		
   183 00000187 C3                      		ret
   184                                  
   185 00000188 4889FA                  .call_write:	mov rdx, rdi
   186 0000018B 4881EA[91000000]        		sub rdx, buffer
   187 00000192 E80E000000              		call write_buff
   188 00000197 48BF-                   		mov rdi, buffer			; now buffer is free
   188 00000199 [9100000000000000] 
   189 000001A1 4889F8                  		mov rax, rdi
   190                                  		
   191 000001A4 C3                      		ret
   192                                  ;------------------------------------------------
   193                                  
   194                                  ;------------------------------------------------
   195                                  ; write_buff
   196                                  ;------------------------------------------------
   197                                  ; Entry: edx - buffer size
   198                                  ;_Note:	 rsi = addres of buffer
   199                                  ; Destr: rax
   200                                  ;------------------------------------------------
   201                                  write_buff:	_mpush rdi, rsi, rcx
   201                              <1> write_buff: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 000001A5 57                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001A6 56                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001A7 51                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   202                                  		
   203 000001A8 B801000000              		mov rax, 0x01
   204 000001AD BF01000000              		mov rdi, 1
   205 000001B2 48BE-                   		mov rsi, buffer
   205 000001B4 [9100000000000000] 
   206                                  
   207 000001BC 0F05                    		syscall
   208                                  
   209                                  		_mrpop rdi, rsi, rcx
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 000001BE 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 000001BF 5E                  <2>  pop %1
     8                              <2>  %rotate -1
     9 000001C0 5F                  <2>  pop %1
    11                              <1> 
   210                                  
   211 000001C1 C3                      		ret
   212                                  
   213                                  ;------------------------------------------------
   214                                  
   215                                  
   216                                  
   217                                  
   218                                  ;------------------------------------------------
   219                                  ; dectoa
   220                                  ;------------------------------------------------
   221                                  ; Entry: 	rax - number to transform
   222                                  ; algorithm taken from stackexchange.com/questions/142842/integer-to-ascii-algorithm-x86-assembly
   223                                  ;------------------------------------------------
   224                                  dectoi:		_mpush rbx, rdx, rdi
   224                              <1> dectoi: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 000001C2 53                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001C3 52                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001C4 57                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   225 000001C5 BBCDCCCCCC              		mov ebx, 0xCCCCCCCD		; magic number
   226 000001CA 4831FF                  		xor rdi, rdi
   227                                  
   228 000001CD 89C1                    .loop:		mov ecx, eax			
   229                                  
   230 000001CF F7E3                    		mul ebx                         ; divide by 10	
   231 000001D1 C1EA03                  		shr edx, 3
   232                                  
   233 000001D4 89D0                    		mov eax, edx 	
   234                                  
   235 000001D6 678D1492                		lea edx, [edx*4 + edx]          ; multiply by 10
   236 000001DA 678D5412D0              		lea edx, [edx * 2 - '0']	; and prep for sub	
   237 000001DF 29D1                    		sub ecx, edx
   238                                  
   239 000001E1 48C1E708                    		shl rdi, 8                      ; make room for byte
   240 000001E5 4801CF                  		add rdi, rcx
   241                                  
   242 000001E8 4883F800                		cmp rax, 0
   243 000001EC 75DF                    		jnz .loop
   244                                  
   245 000001EE 4889F8                  		mov rax, rdi
   246                                  
   247                                  		_mrpop rbx, rdx, rdi
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 000001F1 5F                  <2>  pop %1
     8                              <2>  %rotate -1
     9 000001F2 5A                  <2>  pop %1
     8                              <2>  %rotate -1
     9 000001F3 5B                  <2>  pop %1
    11                              <1> 
   248 000001F4 C3                      		ret
   249                                  ;------------------------------------------------
   250                                  
   251                                  
   252                                  ;------------------------------------------------
   253                                  ; atoi
   254                                  ;------------------------------------------------
   255                                  ; Entry:	%1 - number to transorm
   256                                  ;		%2 - bit depth of system(2\8\16)
   257                                  ;		%3 - number of chars to write, also 0x0
   258                                  ;		     will be added
   259                                  ;		%4 - array to write
   260                                  ;------------------------------------------------
   261 000001F5 55                      atoi:		push rbp
   262 000001F6 4889E5                  		mov rbp, rsp
   263                                  
   264                                  		_mpush rdi, rsi, rax, rcx
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 000001F9 57                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001FA 56                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001FB 50                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001FC 51                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   265                                  
   266 000001FD 4C8B4510                		mov r8,  [rbp + 16]		; num
   267 00000201 4C8B5518                		mov r10, [rbp + 24]		; bit mask
   268 00000205 488B4D20                		mov rcx, [rbp + 32]		; number of chars
   269 00000209 488B7D28                		mov rdi, [rbp + 40]		; array addr
   270                                  
   271 0000020D 4801CF                  		add rdi, rcx			; end of str
   272 00000210 C60700                  		mov byte [rdi], 0x0		; and 0x0 to end
   273 00000213 48FFCF                  		dec rdi
   274                                  
   275 00000216 49FFCA                  		dec r10				; set bit mask
   276                                  
   277 00000219 4D89C1                  		mov r9, r8
   278                                  
   279 0000021C 4D21D1                  .convert:	and r9, r10
   280                                  		
   281 0000021F 418A81[38000000]        		mov al, atoi_chars[r9]
   282 00000226 8807                    		mov byte [rdi], al
   283 00000228 48FFCF                  		dec rdi
   284                                  
   285 0000022B 4D89C1                  		mov r9, r8
   286                                  		
   287 0000022E 4983FA07                		cmp r10, 0x7
   288 00000232 7708                    		ja .hex
   289 00000234 720C                    		jb .bin
   290                                  
   291 00000236 49C1E903                		shr r9, 3
   292 0000023A EB09                    		jmp .cont
   293                                  			
   294 0000023C 49C1E904                .hex:		shr r9, 4
   295 00000240 EB03                    		jmp .cont
   296                                  
   297 00000242 49D1E9                  .bin:		shr r9, 1
   298                                  
   299 00000245 4D89C8                  .cont:		mov r8, r9
   300 00000248 E2D2                    		loop .convert
   301                                  		
   302                                  .loop_end:	_mrpop rdi, rsi, rax, rcx
   302                              <1> .loop_end: 
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000024A 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000024B 58                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000024C 5E                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000024D 5F                  <2>  pop %1
    11                              <1> 
   303                                  
   304 0000024E 5D                      		pop rbp
   305 0000024F C3                      		ret
   306                                  ;------------------------------------------------
   307                                  
   308                                  
   309                                  ;------------------------------------------------
   310                                  section		.data
   311                                  jmp_table:	_jmptbl_addr d, x, o, b, c, s, per
   311                              <1> jmp_table: 
    41                              <1>  %rep %0
    42                              <1>  dq ident_arg.case_%1
    43                              <1>  %rotate 1
    44                              <1> 
    45                              <1>  %endrep
    42 00000000 [8F00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000008 [BC00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000010 [E800000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000018 [1401000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000020 [4001000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000028 [4A01000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000030 [5501000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
   312 00000038 303132333435363738-     atoi_chars:	db "0123456789ABCDEF"
   312 00000041 39414243444546     
   313 00000048 2A2A2A2A2A2A2A2A2A-     atoi_num_buff:	db 65 dup('*')
   313 00000051 2A2A2A2A2A2A2A2A2A-
   313 0000005A 2A2A2A2A2A2A2A2A2A-
   313 00000063 2A2A2A2A2A2A2A2A2A-
   313 0000006C 2A2A2A2A2A2A2A2A2A-
   313 00000075 2A2A2A2A2A2A2A2A2A-
   313 0000007E 2A2A2A2A2A2A2A2A2A-
   313 00000087 2A2A               
   314 00000089 64786F626373250A        args:		db ARGSTR, 0xa
   315 00000091 <res 200h>              buffer:		resb BUFFSIZE
   315          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
   316                                  ;------------------------------------------------
