     1                                  %include "config.s"
     2                              <1> %define BUFFSIZE	512
     2                                  %include "macros.mac"
     3                              <1> ;------------------------------------------------
     4                              <1> ; pops multiple times in REVERSE order
     5                              <1> ;------------------------------------------------
     6                              <1> %macro  	_mrpop 1-* 
     7                              <1> 		%rep %0 
     8                              <1> 		%rotate -1 
     9                              <1> 		pop     %1 
    10                              <1> 		%endrep 
    11                              <1> 
    12                              <1> %endmacro
    13                              <1> ;------------------------------------------------
    14                              <1> 
    15                              <1> ;------------------------------------------------
    16                              <1> ; pushes multiple times in NORMAL order
    17                              <1> ;------------------------------------------------
    18                              <1> %macro		_mpush 1-*		
    19                              <1> 		%rep %0 
    20                              <1> 		push    %1 
    21                              <1> 		%rotate 1 
    22                              <1> 		%endrep 
    23                              <1> 
    24                              <1> %endmacro
    25                              <1> ;------------------------------------------------
    26                              <1> 
    27                              <1> ;------------------------------------------------
    28                              <1> ; pushes multiple times in REVERSE order
    29                              <1> ;------------------------------------------------
    30                              <1> %macro		_mrpush 1-*		
    31                              <1> 		%rep %0 
    32                              <1> 		%rotate -1 
    33                              <1> 		push     %1 
    34                              <1> 		%endrep 
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> ;------------------------------------------------
    38                              <1> 
    39                              <1> ;------------------------------------------------
    40                              <1> %macro		_jmptbl_addr 1-*
    41                              <1> 		%rep %0
    42                              <1> 		dq ident_arg.case_%1
    43                              <1> 		%rotate 1
    44                              <1> 		
    45                              <1> 		%endrep
    46                              <1> %endmacro
    47                              <1> ;------------------------------------------------
    48                              <1> 
    49                              <1> 
    50                              <1> ;------------------------------------------------
    51                              <1> 
    52                              <1> ;------------------------------------------------
     3                                  
     4                                  section .text
     5                                  global _start
     6                                  
     7                                  
     8                                  ;------------------------------------------------
     9                                  %defstr		ARGSTR	dxobcs%
    10                                  %strlen		ARGLEN	ARGSTR
    11                                  ;------------------------------------------------
    12                                  
    13                                  _start:		_mpush '&', '1', '2', 0x1290, Msg, test	; TODO cdecl
    13                              <1> _start: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 00000000 6A26                <2>  push %1
    21                              <2>  %rotate 1
    20 00000002 6A31                <2>  push %1
    21                              <2>  %rotate 1
    20 00000004 6A32                <2>  push %1
    21                              <2>  %rotate 1
    20 00000006 6890120000          <2>  push %1
    21                              <2>  %rotate 1
    20 0000000B 68[0F000000]        <2>  push %1
    21                              <2>  %rotate 1
    20 00000010 68[00000000]        <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
    14                                  
    15 00000015 E810000000              		call printf
    16                                  
    17                                  		_mrpop rcx, rcx, rcx, rcx, rcx, rcx
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000001A 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001B 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001C 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001D 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001E 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001F 59                  <2>  pop %1
    11                              <1> 
    18                                  
    19                                  fin:
    20 00000020 B83C000000              		mov rax, 0x3c
    21 00000025 4831FF                  		xor rdi, rdi
    22 00000028 0F05                    		syscall
    23                                  
    24                                  section		.data
    25 00000000 257325252564256325-     test:		db "%s%%%d%c%c", 0xa, "gg", 0xa, 0x0
    25 00000009 630A67670A00       
    26 0000000F 282E592E290A00          Msg:		db "(.Y.)", 0x0a, 0x0
    27                                  MsgLen		equ $ - Msg
    28                                  
    29                                  section		.text
    30                                  
    31                                  ;------------------------------------------------
    32                                  ; printf
    33                                  ;------------------------------------------------
    34                                  ; Entry: rsi - string addr
    35                                  ;	  other args via stack
    36                                  ; Note_: rsi - curr adr in buffer
    37                                  ;
    38                                  ;------------------------------------------------
    39                                  ; TODO buffer(write on overflow) or on newline
    40                                  
    41 0000002A 55                      printf:		push rbp
    42 0000002B 4889E5                  		mov rbp, rsp
    43                                  
    44 0000002E 488B7510                		mov rsi, [rbp + 16]
    45 00000032 48BF-                   		mov rdi, buffer
    45 00000034 [A600000000000000] 
    46                                  		
    47 0000003C 803E00                  .print_loop:	cmp byte [rsi], 0x0		; \0
    48 0000003F 7420                    		je .print_end
    49 00000041 803E25                  		cmp byte [rsi], '%'		; arg flag
    50 00000044 750F                    		jne .save
    51                                  		
    52 00000046 48FFC6                  		inc rsi
    53 00000049 8A1E                    		mov byte bl, [rsi]		; TODO
    54 0000004B E813000000              		call ident_arg
    55 00000050 48FFC6                  		inc rsi
    56                                  
    57 00000053 EBE7                    		jmp .print_loop
    58                                  
    59 00000055 8A06                    .save:		mov byte al, [rsi]		; TODO movsb?
    60 00000057 E886000000              		call buff_ins	
    61 0000005C 48FFC6                  		inc rsi
    62                                  
    63 0000005F EBDB                    		jmp .print_loop
    64                                  
    65 00000061 5D                      .print_end:	pop rbp
    66 00000062 C3                      		ret
    67                                  ;------------------------------------------------
    68                                  
    69                                  
    70                                  ;------------------------------------------------
    71                                  ; Entry: bl  - char
    72                                  ; 	 rdi - current free addr in buffer
    73                                  ; Destr: rax, rcx, rdx, rdi
    74                                  ; Exit:  rax - free adr in buff, _note: rax = rdi
    75                                  ;------------------------------------------------
    76 00000063 B906000000              ident_arg:	mov rcx, ARGLEN - 1
    77                                  
    78 00000068 3A99[9E000000]          .ident_loop:	cmp byte bl, args[rcx]
    79 0000006E 7403                    		je .switch
    80 00000070 E2F6                    		loop .ident_loop
    81                                  
    82                                  		; default: dont do anything
    83                                  
    84 00000072 C3                      		ret
    85                                  
    86 00000073 4883C508                .switch		add rbp, 0x8
    87                                  
    88 00000077 488B0CCD[16000000]      		mov rcx, qword jmp_table[0 + rcx * 8]
    89 0000007F FFE1                    		jmp rcx
    90                                  
    91 00000081 488B4510                .case_d:	mov rax, [rbp + 16]
    92 00000085 E8A5000000              		call dectoi
    93                                  
    94 0000008A 48890425[5E000000]      		mov qword [atoi_num_buff], rax
    95 00000092 48B9-                   		mov rcx, atoi_num_buff
    95 00000094 [5E00000000000000] 
    96 0000009C EB25                    		jmp .s_loop
    97                                  		
    98 0000009E EB3E                    		jmp .return
    99                                  
   100 000000A0 B802000000              .case_x:	mov rax, 2
   101 000000A5 EB37                    		jmp .return
   102                                  
   103 000000A7 B803000000              .case_o:	mov rax, 3
   104 000000AC EB30                    		jmp .return
   105                                  
   106 000000AE B804000000              .case_b:	mov rax, 4
   107 000000B3 EB29                    		jmp .return
   108                                  ; OK
   109 000000B5 8A4510                  .case_c:	mov byte al, [rbp + 16]
   110 000000B8 E825000000              		call buff_ins
   111 000000BD EB1F                    		jmp .return
   112                                  
   113                                  ; OK
   114 000000BF 488B4D10                .case_s:	mov rcx, [rbp + 16]
   115                                  
   116 000000C3 8A01                    .s_loop:	mov byte al, [rcx]
   117 000000C5 3C00                    		cmp al, 0x0
   118                                  
   119 000000C7 7415                    		je .return
   120                                  		
   121 000000C9 E814000000              		call buff_ins
   122                                  
   123 000000CE 48FFC1                  		inc rcx
   124 000000D1 EBF0                    		jmp .s_loop
   125                                  	
   126                                  ; OK
   127 000000D3 4883ED08                .case_per:	sub rbp, 0x8
   128 000000D7 88D8                    		mov al, bl
   129 000000D9 E804000000              		call buff_ins
   130                                  
   131 000000DE 4889F8                  .return:	mov rax, rdi
   132 000000E1 C3                      		ret
   133                                  ;------------------------------------------------
   134                                  
   135                                  ;------------------------------------------------
   136                                  ; Entry: rdi - current free position in buffer
   137                                  ; 	 al  - char to write in buffer
   138                                  ;
   139                                  ; Writes symbol to buffer. If buffer if full or
   140                                  ; newline character detected, buffer will be written
   141                                  ; to console via syscall(1). After writing buffer will
   142                                  ; be cleared
   143                                  ; Exit:	 rax - free pos in buffer(rdi = rax)
   144                                  ;------------------------------------------------
   145 000000E2 8807                    buff_ins:	mov [rdi], al
   146 000000E4 48FFC7                  		inc rdi
   147                                  
   148 000000E7 4881FF[A5020000]        		cmp rdi, buffer +  BUFFSIZE - 1	; last always \0
   149 000000EE 7705                    		ja .call_write
   150                                  
   151 000000F0 3C0A                    		cmp al, 0xa			; if \n
   152 000000F2 7401                    		je .call_write
   153                                  		
   154 000000F4 C3                      		ret
   155                                  
   156 000000F5 4889FA                  .call_write:	mov rdx, rdi
   157 000000F8 4881EA[A6000000]        		sub rdx, buffer
   158 000000FF E80E000000              		call write_buff
   159 00000104 48BF-                   		mov rdi, buffer			; now buffer is free
   159 00000106 [A600000000000000] 
   160 0000010E 4889F8                  		mov rax, rdi			; TODO
   161                                  		
   162 00000111 C3                      		ret
   163                                  ;------------------------------------------------
   164                                  
   165                                  ;------------------------------------------------
   166                                  ; write_buff
   167                                  ;------------------------------------------------
   168                                  ; Entry: edx - buffer size
   169                                  ;_Note:	 rsi = addres of buffer
   170                                  ; Destr: rax
   171                                  ;------------------------------------------------
   172                                  write_buff:	_mpush rdi, rsi, rcx		; TODO ?
   172                              <1> write_buff: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 00000112 57                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000113 56                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000114 51                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   173                                  		
   174 00000115 B801000000              		mov rax, 0x01
   175 0000011A BF01000000              		mov rdi, 1
   176 0000011F 48BE-                   		mov rsi, buffer
   176 00000121 [A600000000000000] 
   177                                  
   178 00000129 0F05                    		syscall
   179                                  
   180                                  		_mrpop rdi, rsi, rcx
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000012B 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000012C 5E                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000012D 5F                  <2>  pop %1
    11                              <1> 
   181                                  
   182 0000012E C3                      		ret
   183                                  
   184                                  ;------------------------------------------------
   185                                  
   186                                  
   187                                  
   188                                  
   189                                  ;------------------------------------------------
   190                                  ; dectoa
   191                                  ;------------------------------------------------
   192                                  ; Entry: 	rax - number to transform
   193                                  ; algorithm taken from stackexchange.com/questions/142842/integer-to-ascii-algorithm-x86-assembly
   194                                  ;------------------------------------------------
   195                                  dectoi:		_mpush rbx, rdx, rdi
   195                              <1> dectoi: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 0000012F 53                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000130 52                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000131 57                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   196 00000132 BBCDCCCCCC              		mov ebx, 0xCCCCCCCD		; magic number
   197 00000137 4831FF                  		xor rdi, rdi
   198                                  
   199 0000013A 89C1                    .loop:		mov ecx, eax			
   200                                  
   201 0000013C F7E3                    		mul ebx                         ; divide by 10	
   202 0000013E C1EA03                  		shr edx, 3
   203                                  
   204 00000141 89D0                    		mov eax, edx 	
   205                                  
   206 00000143 678D1492                		lea edx, [edx*4 + edx]          ; multiply by 10
   207 00000147 678D5412D0              		lea edx, [edx * 2 - '0']	; and prep for sub	
   208 0000014C 29D1                    		sub ecx, edx
   209                                  
   210 0000014E 48C1E708                    		shl rdi, 8                      ; make room for byte
   211 00000152 4801CF                  		add rdi, rcx
   212                                  
   213 00000155 4883F800                		cmp rax, 0
   214 00000159 75DF                    		jnz .loop
   215                                  
   216 0000015B 4889F8                  		mov rax, rdi
   217                                  
   218                                  		_mrpop rbx, rdx, rdi
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000015E 5F                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000015F 5A                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000160 5B                  <2>  pop %1
    11                              <1> 
   219 00000161 C3                      		ret
   220                                  
   221                                  
   222                                  
   223                                  ;------------------------------------------------
   224                                  section		.data
   225                                  jmp_table:	_jmptbl_addr d, x, o, b, c, s, per
   225                              <1> jmp_table: 
    41                              <1>  %rep %0
    42                              <1>  dq ident_arg.case_%1
    43                              <1>  %rotate 1
    44                              <1> 
    45                              <1>  %endrep
    42 00000016 [8100000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 0000001E [A000000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000026 [A700000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 0000002E [AE00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000036 [B500000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 0000003E [BF00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000046 [D300000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
   226 0000004E 303132333435363738-     atoi_chars:	db "0123456789ABCDEF"
   226 00000057 39414243444546     
   227 0000005E <res 40h>               atoi_num_buff:	resb 64
   227          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
   228 0000009E 64786F626373250A        args:		db ARGSTR, 0xa
   229 000000A6 <res 200h>              buffer:		resb BUFFSIZE
   229          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
   230                                  ;------------------------------------------------
   231                                  
   232                                  
   233                                  
