     1                                  %include "config.s"
     2                              <1> %define BUFFSIZE	1024
     2                                  %include "macros.mac"
     3                              <1> ;------------------------------------------------
     4                              <1> ; pops multiple times in REVERSE order
     5                              <1> ;------------------------------------------------
     6                              <1> %macro  	_mrpop 1-* 
     7                              <1> 		%rep %0 
     8                              <1> 		%rotate -1 
     9                              <1> 		pop     %1 
    10                              <1> 		%endrep 
    11                              <1> 
    12                              <1> %endmacro
    13                              <1> ;------------------------------------------------
    14                              <1> 
    15                              <1> ;------------------------------------------------
    16                              <1> ; pushes multiple times in NORMAL order
    17                              <1> ;------------------------------------------------
    18                              <1> %macro		_mpush 1-*		
    19                              <1> 		%rep %0 
    20                              <1> 		push    %1 
    21                              <1> 		%rotate 1 
    22                              <1> 		%endrep 
    23                              <1> 
    24                              <1> %endmacro
    25                              <1> ;------------------------------------------------
    26                              <1> 
    27                              <1> ;------------------------------------------------
    28                              <1> ; pushes multiple times in REVERSE order
    29                              <1> ;------------------------------------------------
    30                              <1> %macro		_mrpush 1-*		
    31                              <1> 		%rep %0 
    32                              <1> 		%rotate -1 
    33                              <1> 		push     %1 
    34                              <1> 		%endrep 
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> ;------------------------------------------------
    38                              <1> 
    39                              <1> ;------------------------------------------------
    40                              <1> %macro		_jmptbl_addr 1-*
    41                              <1> 		%rep %0
    42                              <1> 		dq ident_arg.case_%1
    43                              <1> 		%rotate 1
    44                              <1> 		
    45                              <1> 		%endrep
    46                              <1> %endmacro
    47                              <1> ;------------------------------------------------
    48                              <1> 
    49                              <1> 
    50                              <1> ;------------------------------------------------
    51                              <1> 
    52                              <1> ;------------------------------------------------
     3                                  
     4                                  section .text
     5                                  global _start
     6                                  
     7                                  
     8                                  ;------------------------------------------------
     9                                  %defstr		ARGSTR	dxobcs%
    10                                  %strlen		ARGLEN	ARGSTR
    11                                  ;------------------------------------------------
    12                                  
    13                                  _start:		_mrpush '1', '2', '3'
    13                              <1> _start: 
    31                              <1>  %rep %0
    32                              <1>  %rotate -1
    33                              <1>  push %1
    34                              <1>  %endrep
    32                              <2>  %rotate -1
    33 00000000 6A33                <2>  push %1
    32                              <2>  %rotate -1
    33 00000002 6A32                <2>  push %1
    32                              <2>  %rotate -1
    33 00000004 6A31                <2>  push %1
    35                              <1> 
    14 00000006 68[0F000000]            		push Msg
    15                                  
    16 0000000B 48BF-                   		mov rdi, test
    16 0000000D [0000000000000000] 
    17 00000015 E828000000              		call printf
    18                                  		_mrpop rcx, rcx, rcx
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000001A 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001B 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 0000001C 59                  <2>  pop %1
    11                              <1> 
    19                                  
    20 0000001D B801000000              		mov rax, 0x01
    21 00000022 BF01000000              		mov rdi, 1
    22 00000027 48BE-                   		mov rsi, buffer
    22 00000029 [5A00000000000000] 
    23 00000031 BA00040000              		mov edx, BUFFSIZE
    24 00000036 0F05                    		syscall
    25                                  fin:
    26 00000038 B83C000000              		mov rax, 0x3c
    27 0000003D 4831FF                  		xor rdi, rdi
    28 00000040 0F05                    		syscall
    29                                  
    30                                  section		.data
    31 00000000 25735F25635F25635F-     test:		db "%s_%c_%c_%c_%%", 0xa
    31 00000009 25635F25250A       
    32 0000000F 25734F256F252E6667-     Msg:		db "%sO%o%.fgf", 0x0a
    32 00000018 660A               
    33                                  MsgLen		equ $ - Msg
    34                                  
    35                                  section		.text
    36                                  
    37                                  ;------------------------------------------------
    38                                  ; printf
    39                                  ;------------------------------------------------
    40                                  ; Entry: rdi - string addr
    41                                  ;	  other args via stack
    42                                  ; Note_: rsi - curr adr in buffer
    43                                  ;
    44                                  ;------------------------------------------------
    45                                  ; TODO buffer(write on overflow) or on newline
    46                                  
    47 00000042 55                      printf:		push rbp
    48 00000043 4889E5                  		mov rbp, rsp
    49                                  
    50 00000046 48BE-                   		mov rsi, buffer
    50 00000048 [5A00000000000000] 
    51                                  		
    52 00000050 803F0A                  .print_loop:	cmp byte [rdi], 0xa		; \0
    53 00000053 7420                    		je .print_end
    54 00000055 803F25                  		cmp byte [rdi], '%'		; arg flag
    55 00000058 750F                    		jne .save
    56                                  		
    57 0000005A 48FFC7                  		inc rdi
    58 0000005D 8A1F                    		mov byte bl, [rdi]		; TODO
    59 0000005F E813000000              		call ident_arg
    60 00000064 48FFC7                  		inc rdi
    61                                  
    62 00000067 EBE7                    		jmp .print_loop
    63                                  
    64 00000069 8A07                    .save:		mov byte al, [rdi]		; TODO movsb?
    65 0000006B 8806                    		mov byte [rsi], al
    66 0000006D 48FFC6                  		inc rsi
    67 00000070 48FFC7                  		inc rdi
    68                                  
    69 00000073 EBDB                    		jmp .print_loop
    70                                  
    71 00000075 5D                      .print_end:	pop rbp
    72 00000076 C3                      		ret
    73                                  ;------------------------------------------------
    74                                  
    75                                  
    76                                  ;------------------------------------------------
    77                                  ; Entry: bl  - char
    78                                  ; 	 rsi - current free addr in buffer
    79                                  ; Destr: rax, rcx, rdx
    80                                  ;	 rsi(changed to next free adr in buff)
    81                                  ;------------------------------------------------
    82 00000077 B906000000              ident_arg:	mov rcx, ARGLEN - 1
    83                                  
    84 0000007C 3A99[52000000]          .ident_loop:	cmp byte bl, args[rcx]
    85 00000082 7403                    		je .switch
    86 00000084 E2F6                    		loop .ident_loop
    87                                  
    88                                  		; default: dont do anything
    89                                  
    90 00000086 C3                      		ret
    91                                  
    92 00000087 4883C508                .switch		add rbp, 0x8
    93                                  
    94 0000008B 488B0CCD[1A000000]      		mov rcx, qword jmp_table[0 + rcx * 8]
    95 00000093 FFE1                    		jmp rcx
    96                                  
    97 00000095 B801000000              .case_d:	mov rax, 1
    98 0000009A C3                      		ret
    99                                  
   100 0000009B B802000000              .case_x:	mov rax, 2
   101 000000A0 C3                      		ret
   102                                  
   103 000000A1 B803000000              .case_o:	mov rax, 3
   104 000000A6 C3                      		ret
   105                                  
   106 000000A7 B804000000              .case_b:	mov rax, 4
   107 000000AC C3                      		ret
   108                                  ; OK
   109 000000AD 8A4508                  .case_c:	mov byte al, [rbp + 8]
   110 000000B0 8806                    		mov byte [rsi], al
   111 000000B2 48FFC6                  		inc rsi
   112 000000B5 C3                      		ret
   113                                  ; OK
   114 000000B6 488B5508                .case_s:	mov rdx, [rbp + 8]
   115                                  
   116 000000BA 8A02                    .s_loop:	mov byte al, [rdx]
   117 000000BC 3C0A                    		cmp al, 0xa
   118                                  
   119 000000BE 740A                    		je .s_loop_end
   120                                  		
   121 000000C0 8806                    		mov byte [rsi], al
   122 000000C2 48FFC6                  		inc rsi
   123 000000C5 48FFC2                  		inc rdx
   124 000000C8 EBF0                    		jmp .s_loop
   125                                  
   126 000000CA C3                      .s_loop_end:	ret
   127                                  ; OK
   128 000000CB 881E                    .case_per:	mov byte [rsi], bl
   129 000000CD 48FFC6                  		inc rsi
   130 000000D0 C3                      		ret
   131                                  ;------------------------------------------------
   132                                  
   133                                  ;------------------------------------------------
   134                                  section		.data
   135                                  ;jmp_table:	dq ident_arg.case_d, ident_arg.case_x,;		   ident_arg.case_o, ident_arg.case_b,;		   ident_arg.case_c, ident_arg.case_s,;		   ident_arg.case_per
   139                                  
   140                                  jmp_table:	_jmptbl_addr d, x, o, b, c, s, per
   140                              <1> jmp_table: 
    41                              <1>  %rep %0
    42                              <1>  dq ident_arg.case_%1
    43                              <1>  %rotate 1
    44                              <1> 
    45                              <1>  %endrep
    42 0000001A [9500000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000022 [9B00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 0000002A [A100000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000032 [A700000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 0000003A [AD00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000042 [B600000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 0000004A [CB00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
   141 00000052 64786F626373250A        args:		db ARGSTR, 0xa
   142 0000005A <res 400h>              buffer:		resb BUFFSIZE
   142          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
   143                                  ;------------------------------------------------
