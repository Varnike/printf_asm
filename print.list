     1                                  %include "config.s"
     2                              <1> %define BUFFSIZE	512
     2                                  %include "macros.mac"
     3                              <1> ;------------------------------------------------
     4                              <1> ; pops multiple times in REVERSE order
     5                              <1> ;------------------------------------------------
     6                              <1> %macro  	_mrpop 1-* 
     7                              <1> 		%rep %0 
     8                              <1> 		%rotate -1 
     9                              <1> 		pop     %1 
    10                              <1> 		%endrep 
    11                              <1> 
    12                              <1> %endmacro
    13                              <1> ;------------------------------------------------
    14                              <1> 
    15                              <1> ;------------------------------------------------
    16                              <1> ; pushes multiple times in NORMAL order
    17                              <1> ;------------------------------------------------
    18                              <1> %macro		_mpush 1-*		
    19                              <1> 		%rep %0 
    20                              <1> 		push    %1 
    21                              <1> 		%rotate 1 
    22                              <1> 		%endrep 
    23                              <1> 
    24                              <1> %endmacro
    25                              <1> ;------------------------------------------------
    26                              <1> 
    27                              <1> ;------------------------------------------------
    28                              <1> ; pushes multiple times in REVERSE order
    29                              <1> ;------------------------------------------------
    30                              <1> %macro		_mrpush 1-*		
    31                              <1> 		%rep %0 
    32                              <1> 		%rotate -1 
    33                              <1> 		push     %1 
    34                              <1> 		%endrep 
    35                              <1> 
    36                              <1> %endmacro
    37                              <1> ;------------------------------------------------
    38                              <1> 
    39                              <1> ;------------------------------------------------
    40                              <1> %macro		_jmptbl_addr 1-*
    41                              <1> 		%rep %0
    42                              <1> 		dq ident_arg.case_%1
    43                              <1> 		%rotate 1
    44                              <1> 		
    45                              <1> 		%endrep
    46                              <1> %endmacro
    47                              <1> ;------------------------------------------------
    48                              <1> 
    49                              <1> 
    50                              <1> ;------------------------------------------------
    51                              <1> 
    52                              <1> ;------------------------------------------------
     3                                  
     4                                  section .text
     5                                  global _start
     6                                  
     7                                  
     8                                  ;------------------------------------------------
     9                                  %defstr		ARGSTR	dxobcs%
    10                                  %strlen		ARGLEN	ARGSTR
    11                                  ;------------------------------------------------
    12                                  
    13                                  _start:		_mpush Msg, '2', -1488, 0x0F0F0F0F, test
    13                              <1> _start: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 00000000 68[1B000000]        <2>  push %1
    21                              <2>  %rotate 1
    20 00000005 6A32                <2>  push %1
    21                              <2>  %rotate 1
    20 00000007 6830FAFFFF          <2>  push %1
    21                              <2>  %rotate 1
    20 0000000C 680F0F0F0F          <2>  push %1
    21                              <2>  %rotate 1
    20 00000011 68[00000000]        <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
    14 00000016 49BF-                   		mov r15, atoi_num_buff
    14 00000018 [6900000000000000] 
    15                                  
    16 00000020 E80F000000              		call printf
    17                                  
    18                                  		_mrpop rcx, rcx, rcx, rcx, rcx
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 00000025 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000026 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000027 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000028 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000029 59                  <2>  pop %1
    11                              <1> 
    19                                  
    20                                  fin:
    21 0000002A B83C000000              		mov rax, 0x3c
    22 0000002F 4831FF                  		xor rdi, rdi
    23 00000032 0F05                    		syscall
    24                                  
    25                                  section		.data
    26 00000000 5F5F25785F5F25645F-     test:		db "__%x__%d__%%__%c__%s__", 0xa, "gg", 0xa, 0x0
    26 00000009 5F25255F5F25635F5F-
    26 00000012 25735F5F0A67670A00 
    27 0000001B 282E592E2900            Msg:		db "(.Y.)", 0x0
    28                                  MsgLen		equ $ - Msg
    29                                  
    30                                  section		.text
    31                                  
    32                                  ;------------------------------------------------
    33                                  ; printf
    34                                  ;------------------------------------------------
    35                                  ; Entry: rsi - string addr
    36                                  ;	  other args via stack
    37                                  ; Note_: rsi - curr adr in buffer
    38                                  ;
    39                                  ;------------------------------------------------
    40                                  
    41 00000034 55                      printf:		push rbp
    42 00000035 4889E5                  		mov rbp, rsp
    43                                  
    44 00000038 488B7510                		mov rsi, [rbp + 16]
    45 0000003C 48BF-                   		mov rdi, buffer
    45 0000003E [B200000000000000] 
    46                                  		
    47 00000046 803E00                  .print_loop:	cmp byte [rsi], 0x0		; \0
    48 00000049 7420                    		je .print_end
    49 0000004B 803E25                  		cmp byte [rsi], '%'		; arg flag
    50 0000004E 750F                    		jne .save
    51                                  		
    52 00000050 48FFC6                  		inc rsi
    53 00000053 8A1E                    		mov byte bl, [rsi]
    54 00000055 E813000000              		call ident_arg
    55 0000005A 48FFC6                  		inc rsi
    56                                  
    57 0000005D EBE7                    		jmp .print_loop
    58                                  
    59 0000005F 8A06                    .save:		mov byte al, [rsi]
    60 00000061 E824010000              		call buff_ins	
    61 00000066 48FFC6                  		inc rsi
    62                                  
    63 00000069 EBDB                    		jmp .print_loop
    64                                  
    65 0000006B 5D                      .print_end:	pop rbp
    66 0000006C C3                      		ret
    67                                  ;------------------------------------------------
    68                                  
    69                                  %macro		_two_sys_write 3
    70                                  		_mpush %1, %2, %3
    71                                  		mov rcx, [rbp + 16]
    72                                  		push rcx
    73                                  
    74                                  		call atoi
    75                                  
    76                                  		_mrpop r8, r8, r8, r8
    77                                  
    78                                  		mov rcx, atoi_num_buff
    79                                  		
    80                                  		call str_write
    81                                  
    82                                  		jmp .return
    83                                  %endmacro
    84                                  
    85                                  ;------------------------------------------------
    86                                  ; Entry: bl  - char
    87                                  ; 	 rdi - current free addr in buffer
    88                                  ; Destr: rax, rcx, rdx, rdi
    89                                  ; Exit:  rax - free adr in buff, _note: rax = rdi
    90                                  ;------------------------------------------------
    91 0000006D B906000000              ident_arg:	mov rcx, ARGLEN - 1
    92                                  
    93 00000072 3A99[AA000000]          .ident_loop:	cmp byte bl, args[rcx]
    94 00000078 740B                    		je .switch
    95 0000007A E2F6                    		loop .ident_loop
    96                                  		
    97 0000007C 3A99[AA000000]          		cmp byte bl, args[rcx]
    98 00000082 7401                    		je .switch
    99                                  
   100                                  		; default: dont do anything
   101                                  
   102 00000084 C3                      		ret
   103                                  
   104 00000085 4883C508                .switch		add rbp, 0x8
   105                                  
   106 00000089 488B0CCD[21000000]      		mov rcx, qword jmp_table[0 + rcx * 8]
   107 00000091 FFE1                    		jmp rcx
   108                                  
   109 00000093 488B4510                .case_d:	mov rax, [rbp + 16]
   110                                  		
   111 00000097 4885C0                  		test rax, rax
   112 0000009A 7D0C                    		jnl .pos
   113                                  		
   114 0000009C 50                      		push rax
   115 0000009D B02D                    		mov al, '-'
   116 0000009F E8E6000000              		call buff_ins
   117 000000A4 58                      		pop rax
   118                                  
   119 000000A5 48F7D8                  		neg rax
   120                                  
   121 000000A8 E82A010000              .pos:		call dectoi
   122                                  
   123 000000AD 48890425[69000000]      		mov qword [atoi_num_buff], rax
   124 000000B5 C60425[71000000]00      		mov byte atoi_num_buff[8], 0x0
   125 000000BD 48B9-                   		mov rcx, atoi_num_buff
   125 000000BF [6900000000000000] 
   126                                  
   127 000000C7 E8AD000000              		call str_write
   128 000000CC E9A4000000              		jmp .return
   129                                  
   130                                  .case_x:	_two_sys_write atoi_num_buff, 8, 0x10
   130                              <1> .case_x: 
    70                              <1>  _mpush %1, %2, %3
    19                              <2>  %rep %0
    20                              <2>  push %1
    21                              <2>  %rotate 1
    22                              <2>  %endrep
    20 000000D1 68[69000000]        <3>  push %1
    21                              <3>  %rotate 1
    20 000000D6 6A08                <3>  push %1
    21                              <3>  %rotate 1
    20 000000D8 6A10                <3>  push %1
    21                              <3>  %rotate 1
    23                              <2> 
    71 000000DA 488B4D10            <1>  mov rcx, [rbp + 16]
    72 000000DE 51                  <1>  push rcx
    73                              <1> 
    74 000000DF E826010000          <1>  call atoi
    75                              <1> 
    76                              <1>  _mrpop r8, r8, r8, r8
     7                              <2>  %rep %0
     8                              <2>  %rotate -1
     9                              <2>  pop %1
    10                              <2>  %endrep
     8                              <3>  %rotate -1
     9 000000E4 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000E6 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000E8 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 000000EA 4158                <3>  pop %1
    11                              <2> 
    77                              <1> 
    78 000000EC 48B9-               <1>  mov rcx, atoi_num_buff
    78 000000EE [6900000000000000]  <1>
    79                              <1> 
    80 000000F6 E87E000000          <1>  call str_write
    81                              <1> 
    82 000000FB EB78                <1>  jmp .return
   131                                  
   132                                  .case_o:	_two_sys_write atoi_num_buff, 11, 0x8
   132                              <1> .case_o: 
    70                              <1>  _mpush %1, %2, %3
    19                              <2>  %rep %0
    20                              <2>  push %1
    21                              <2>  %rotate 1
    22                              <2>  %endrep
    20 000000FD 68[69000000]        <3>  push %1
    21                              <3>  %rotate 1
    20 00000102 6A0B                <3>  push %1
    21                              <3>  %rotate 1
    20 00000104 6A08                <3>  push %1
    21                              <3>  %rotate 1
    23                              <2> 
    71 00000106 488B4D10            <1>  mov rcx, [rbp + 16]
    72 0000010A 51                  <1>  push rcx
    73                              <1> 
    74 0000010B E8FA000000          <1>  call atoi
    75                              <1> 
    76                              <1>  _mrpop r8, r8, r8, r8
     7                              <2>  %rep %0
     8                              <2>  %rotate -1
     9                              <2>  pop %1
    10                              <2>  %endrep
     8                              <3>  %rotate -1
     9 00000110 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000112 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000114 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000116 4158                <3>  pop %1
    11                              <2> 
    77                              <1> 
    78 00000118 48B9-               <1>  mov rcx, atoi_num_buff
    78 0000011A [6900000000000000]  <1>
    79                              <1> 
    80 00000122 E852000000          <1>  call str_write
    81                              <1> 
    82 00000127 EB4C                <1>  jmp .return
   133                                  
   134                                  .case_b:	_two_sys_write atoi_num_buff, 32, 0x2
   134                              <1> .case_b: 
    70                              <1>  _mpush %1, %2, %3
    19                              <2>  %rep %0
    20                              <2>  push %1
    21                              <2>  %rotate 1
    22                              <2>  %endrep
    20 00000129 68[69000000]        <3>  push %1
    21                              <3>  %rotate 1
    20 0000012E 6A20                <3>  push %1
    21                              <3>  %rotate 1
    20 00000130 6A02                <3>  push %1
    21                              <3>  %rotate 1
    23                              <2> 
    71 00000132 488B4D10            <1>  mov rcx, [rbp + 16]
    72 00000136 51                  <1>  push rcx
    73                              <1> 
    74 00000137 E8CE000000          <1>  call atoi
    75                              <1> 
    76                              <1>  _mrpop r8, r8, r8, r8
     7                              <2>  %rep %0
     8                              <2>  %rotate -1
     9                              <2>  pop %1
    10                              <2>  %endrep
     8                              <3>  %rotate -1
     9 0000013C 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 0000013E 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000140 4158                <3>  pop %1
     8                              <3>  %rotate -1
     9 00000142 4158                <3>  pop %1
    11                              <2> 
    77                              <1> 
    78 00000144 48B9-               <1>  mov rcx, atoi_num_buff
    78 00000146 [6900000000000000]  <1>
    79                              <1> 
    80 0000014E E826000000          <1>  call str_write
    81                              <1> 
    82 00000153 EB20                <1>  jmp .return
   135                                  ; OK
   136 00000155 8A4510                  .case_c:	mov byte al, [rbp + 16]
   137 00000158 E82D000000              		call buff_ins
   138 0000015D EB16                    		jmp .return
   139                                  
   140                                  ; OK
   141 0000015F 488B4D10                .case_s:	mov rcx, [rbp + 16]
   142                                  
   143 00000163 E811000000              		call str_write
   144 00000168 EB0B                    		jmp .return
   145                                  ; OK
   146 0000016A 4883ED08                .case_per:	sub rbp, 0x8
   147 0000016E 88D8                    		mov al, bl
   148 00000170 E815000000              		call buff_ins
   149                                  
   150 00000175 4889F8                  .return:	mov rax, rdi
   151 00000178 C3                      		ret
   152                                  ;------------------------------------------------
   153                                  
   154                                  
   155                                  
   156                                  ;------------------------------------------------
   157                                  ; str_write
   158                                  ;------------------------------------------------
   159                                  ; Entry: rcx - address of null-terminated string
   160                                  ;------------------------------------------------
   161 00000179 8A01                    str_write:	mov byte al, [rcx]
   162 0000017B 3C00                    		cmp al, 0x0
   163                                  
   164 0000017D 740A                    		je .return
   165                                  		
   166 0000017F E806000000              		call buff_ins
   167                                  
   168 00000184 48FFC1                  		inc rcx
   169 00000187 EBF0                    		jmp str_write
   170                                  
   171 00000189 C3                      .return:	ret
   172                                  ;------------------------------------------------
   173                                  
   174                                  ;------------------------------------------------
   175                                  ; Entry: rdi - current free position in buffer
   176                                  ; 	 al  - char to write in buffer
   177                                  ;
   178                                  ; Writes symbol to buffer. If buffer if full or
   179                                  ; newline character detected, buffer will be written
   180                                  ; to console via syscall(1). After writing buffer will
   181                                  ; be cleared
   182                                  ; Exit:	 rax - free pos in buffer(rdi = rax)
   183                                  ;------------------------------------------------
   184 0000018A 8807                    buff_ins:	mov [rdi], al
   185 0000018C 48FFC7                  		inc rdi
   186                                  
   187 0000018F 4881FF[B1020000]        		cmp rdi, buffer +  BUFFSIZE - 1	; last always \0
   188 00000196 7705                    		ja .call_write
   189                                  
   190 00000198 3C0A                    		cmp al, 0xa			; if \n
   191 0000019A 7401                    		je .call_write
   192                                  		
   193 0000019C C3                      		ret
   194                                  
   195 0000019D 4889FA                  .call_write:	mov rdx, rdi
   196 000001A0 4881EA[B2000000]        		sub rdx, buffer
   197 000001A7 E80E000000              		call write_buff
   198 000001AC 48BF-                   		mov rdi, buffer			; now buffer is free
   198 000001AE [B200000000000000] 
   199 000001B6 4889F8                  		mov rax, rdi
   200                                  		
   201 000001B9 C3                      		ret
   202                                  ;------------------------------------------------
   203                                  
   204                                  ;------------------------------------------------
   205                                  ; write_buff
   206                                  ;------------------------------------------------
   207                                  ; Entry: edx - buffer size
   208                                  ;_Note:	 rsi = addres of buffer
   209                                  ; Destr: rax
   210                                  ;------------------------------------------------
   211                                  write_buff:	_mpush rdi, rsi, rcx
   211                              <1> write_buff: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 000001BA 57                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001BB 56                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001BC 51                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   212                                  		
   213 000001BD B801000000              		mov rax, 0x01
   214 000001C2 BF01000000              		mov rdi, 1
   215 000001C7 48BE-                   		mov rsi, buffer
   215 000001C9 [B200000000000000] 
   216                                  
   217 000001D1 0F05                    		syscall
   218                                  
   219                                  		_mrpop rdi, rsi, rcx
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 000001D3 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 000001D4 5E                  <2>  pop %1
     8                              <2>  %rotate -1
     9 000001D5 5F                  <2>  pop %1
    11                              <1> 
   220                                  
   221 000001D6 C3                      		ret
   222                                  
   223                                  ;------------------------------------------------
   224                                  
   225                                  
   226                                  
   227                                  
   228                                  ;------------------------------------------------
   229                                  ; dectoa
   230                                  ;------------------------------------------------
   231                                  ; Entry: 	rax - number to transform
   232                                  ; algorithm taken from stackexchange.com/questions/142842/integer-to-ascii-algorithm-x86-assembly
   233                                  ;------------------------------------------------
   234                                  dectoi:		_mpush rbx, rdx, rdi
   234                              <1> dectoi: 
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 000001D7 53                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001D8 52                  <2>  push %1
    21                              <2>  %rotate 1
    20 000001D9 57                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   235 000001DA BBCDCCCCCC              		mov ebx, 0xCCCCCCCD		; magic number
   236 000001DF 4831FF                  		xor rdi, rdi
   237                                  
   238 000001E2 89C1                    .loop:		mov ecx, eax			
   239                                  
   240 000001E4 F7E3                    		mul ebx                         ; divide by 10	
   241 000001E6 C1EA03                  		shr edx, 3
   242                                  
   243 000001E9 89D0                    		mov eax, edx 	
   244                                  
   245 000001EB 678D1492                		lea edx, [edx*4 + edx]          ; multiply by 10
   246 000001EF 678D5412D0              		lea edx, [edx * 2 - '0']	; and prep for sub	
   247 000001F4 29D1                    		sub ecx, edx
   248                                  
   249 000001F6 48C1E708                    		shl rdi, 8                      ; make room for byte
   250 000001FA 4801CF                  		add rdi, rcx
   251                                  
   252 000001FD 4883F800                		cmp rax, 0
   253 00000201 75DF                    		jnz .loop
   254                                  
   255 00000203 4889F8                  		mov rax, rdi
   256                                  
   257                                  		_mrpop rbx, rdx, rdi
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 00000206 5F                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000207 5A                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000208 5B                  <2>  pop %1
    11                              <1> 
   258 00000209 C3                      		ret
   259                                  ;------------------------------------------------
   260                                  
   261                                  
   262                                  ;------------------------------------------------
   263                                  ; atoi
   264                                  ;------------------------------------------------
   265                                  ; Entry:	%1 - number to transorm
   266                                  ;		%2 - bit depth of system(2\8\16)
   267                                  ;		%3 - number of chars to write, also 0x0
   268                                  ;		     will be added
   269                                  ;		%4 - array to write
   270                                  ;------------------------------------------------
   271 0000020A 55                      atoi:		push rbp
   272 0000020B 4889E5                  		mov rbp, rsp
   273                                  
   274                                  		_mpush rdi, rsi, rax, rcx
    19                              <1>  %rep %0
    20                              <1>  push %1
    21                              <1>  %rotate 1
    22                              <1>  %endrep
    20 0000020E 57                  <2>  push %1
    21                              <2>  %rotate 1
    20 0000020F 56                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000210 50                  <2>  push %1
    21                              <2>  %rotate 1
    20 00000211 51                  <2>  push %1
    21                              <2>  %rotate 1
    23                              <1> 
   275                                  
   276 00000212 4C8B4510                		mov r8,  [rbp + 16]		; num
   277 00000216 4C8B5518                		mov r10, [rbp + 24]		; bit mask
   278 0000021A 488B4D20                		mov rcx, [rbp + 32]		; number of chars
   279 0000021E 488B7D28                		mov rdi, [rbp + 40]		; array addr
   280                                  
   281 00000222 4801CF                  		add rdi, rcx			; end of str
   282 00000225 C60700                  		mov byte [rdi], 0x0		; and 0x0 to end
   283 00000228 48FFCF                  		dec rdi
   284                                  
   285 0000022B 49FFCA                  		dec r10				; set bit mask
   286                                  
   287 0000022E 4D89C1                  		mov r9, r8
   288                                  
   289 00000231 4D21D1                  .convert:	and r9, r10
   290                                  		
   291 00000234 418A81[59000000]        		mov al, atoi_chars[r9]
   292 0000023B 8807                    		mov byte [rdi], al
   293 0000023D 48FFCF                  		dec rdi
   294                                  
   295 00000240 4D89C1                  		mov r9, r8
   296                                  		
   297 00000243 4983FA07                		cmp r10, 0x7
   298 00000247 7708                    		ja .hex
   299 00000249 720C                    		jb .bin
   300                                  
   301 0000024B 49C1E903                		shr r9, 3
   302 0000024F EB09                    		jmp .cont
   303                                  			
   304 00000251 49C1E904                .hex:		shr r9, 4
   305 00000255 EB03                    		jmp .cont
   306                                  
   307 00000257 49D1E9                  .bin:		shr r9, 1
   308                                  
   309 0000025A 4D89C8                  .cont:		mov r8, r9
   310 0000025D E2D2                    		loop .convert
   311                                  		
   312                                  .loop_end:	_mrpop rdi, rsi, rax, rcx
   312                              <1> .loop_end: 
     7                              <1>  %rep %0
     8                              <1>  %rotate -1
     9                              <1>  pop %1
    10                              <1>  %endrep
     8                              <2>  %rotate -1
     9 0000025F 59                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000260 58                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000261 5E                  <2>  pop %1
     8                              <2>  %rotate -1
     9 00000262 5F                  <2>  pop %1
    11                              <1> 
   313                                  
   314 00000263 5D                      		pop rbp
   315 00000264 C3                      		ret
   316                                  ;------------------------------------------------
   317                                  
   318                                  
   319                                  ;------------------------------------------------
   320                                  section		.data
   321                                  jmp_table:	_jmptbl_addr d, x, o, b, c, s, per
   321                              <1> jmp_table: 
    41                              <1>  %rep %0
    42                              <1>  dq ident_arg.case_%1
    43                              <1>  %rotate 1
    44                              <1> 
    45                              <1>  %endrep
    42 00000021 [9300000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000029 [D100000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000031 [FD00000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000039 [2901000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000041 [5501000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000049 [5F01000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
    42 00000051 [6A01000000000000]  <2>  dq ident_arg.case_%1
    43                              <2>  %rotate 1
    44                              <2> 
   322 00000059 303132333435363738-     atoi_chars:	db "0123456789ABCDEF"
   322 00000062 39414243444546     
   323 00000069 2A2A2A2A2A2A2A2A2A-     atoi_num_buff:	db 65 dup('*')
   323 00000072 2A2A2A2A2A2A2A2A2A-
   323 0000007B 2A2A2A2A2A2A2A2A2A-
   323 00000084 2A2A2A2A2A2A2A2A2A-
   323 0000008D 2A2A2A2A2A2A2A2A2A-
   323 00000096 2A2A2A2A2A2A2A2A2A-
   323 0000009F 2A2A2A2A2A2A2A2A2A-
   323 000000A8 2A2A               
   324 000000AA 64786F626373250A        args:		db ARGSTR, 0xa
   325 000000B2 <res 200h>              buffer:		resb BUFFSIZE
   325          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
   326                                  ;------------------------------------------------
